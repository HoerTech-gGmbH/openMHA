// This file is part of the HörTech Open Master Hearing Aid (openMHA)
// Copyright © 2019 2020 2021 HörTech gGmbH
// Copyright © 2022 Hörzentrum Oldenburg gGmbH
//
// openMHA is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// openMHA is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License, version 3 for more details.
//
// You should have received a copy of the GNU Affero General Public License, 
// version 3 along with openMHA.  If not, see <http://www.gnu.org/licenses/>.

// This job checks if any changes have been done to the external
// libraries (directory external_libs and below) in git branch "development".
// If this is the case, then it fast-forwards git branch
// "external_libs_development" to the current state of branch development.
// This is done so that our Jenkins job which builds the external libraries
// recompiles the external libraries, that Jenkins job watches git branch
// "external_libs_development".

pipeline {
    agent any // This job needs git and a shell.  All our agents qualify.
    options {
        buildDiscarder(logRotator(daysToKeepStr: '7', artifactDaysToKeepStr: '7'))
    }
    stages {
        stage("update-external_libs-branch-if-necessary") {
            when {branch "development"} // restrict job to branch development
            steps {
                // This job performs git pulls and git pushes. It needs an ssh
                // key with the required permissions to do this.
                withCredentials(bindings: [sshUserPrivateKey(                  \
                                             credentialsId: 'git',             \
                                             keyFileVariable: 'GIT_SSH_KEY')]) {

                  // Regardless of the commit id that triggered this build
                  // always jump to the latest commit in branch development.
                  // This may save unnecessary intermediate rebuilds of the
                  // external libraries.
                  sh 'git checkout development'
                  sh 'GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git pull'

                  // Now check out the latest state of branch
                  // external_libs_development for comparison.
                  sh 'git checkout external_libs_development'
                  sh 'GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git pull'

                  // The following shell script determines if the
                  // external_libs_development branch needs a fast-forward
                  // update and if yes, updates it and pushes it.
                  sh '''
                    if ! git diff --exit-code --quiet external_libs_development development -- external_libs
                    then
                      git merge --ff-only development
                      GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git push
                    fi
                  '''
               }
            }
        }
    }
    // Email notification on failed build taken from
    // https://jenkins.io/doc/pipeline/tour/post/
    // multiple recipients are comma-separated:
    // https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#-mail-%20mail
    post {
        failure {
            mail to: 'tobiasherzke@openmha.com,paulmaanen@openmha.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}

#!/bin/bash

# This file is part of the HörTech Open Master Hearing Aid (openMHA)
# Copyright © 2013 2014 2015 2016 2017 2018 2019 2020 HörTech gGmbH
#
# openMHA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# openMHA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License, version 3 for more details.
#
# You should have received a copy of the GNU Affero General Public License,
# version 3 along with openMHA.  If not, see <http://www.gnu.org/licenses/>.

chkhdr(){
    echo "#include <$1> "| g++ -x c++ - -c $MACCXXFLAGS -o /dev/null 2>/dev/null 1>/dev/null && true || false;
}
chklib(){
    echo "int main(){return 0;}"| g++ -x c++ - $MACLDFLAGS -l$1 -o /dev/null 2>/dev/null 1>/dev/null && true || false;
}
(
    PREFIX=$(pwd)
    DEBUG="-g"
    for arg in "$@"; do
        case "$arg" in
            --prefix=*)
                PREFIX=`echo $arg | sed 's/--prefix=//'`
                ;;
            --debug)
                DEBUG="-g"
                ;;
            --nodebug)
                DEBUG=""
                ;;
            --debug=*)
                DEBUG=`echo $arg | sed 's/--debug=/-g/'`
                ;;
            --with-alsa=*)
                WITH_ALSA=`echo $arg | sed 's/--with-alsa=//'`
                ;;
            --arch=*)
                ARCH=`echo $arg | sed 's/--arch=//'`
                ;;
            --with-lsl)
                WITH_LSL=yes
                ;;
            --with-eigen)
                WITH_EIGEN=yes
                ;;
            --with-jack=*)
                WITH_JACK=`echo $arg | sed 's/--with-jack=//'`
                ;;
            --with-lsl=*)
                WITH_LSL=`echo $arg | sed 's/--with-lsl=//'`
                ;;
            --with-eigen=*)
                WITH_EIGEN=`echo $arg | sed 's/--with-eigen=//'`
                ;;
            --with-osc=*)
                WITH_OSC=`echo $arg | sed 's/--with-osc=//'`
                ;;
            --cxxstandard=*)
                CXXSTANDARD=`echo $arg | sed 's/--cxxstandard=//'`
                ;;
            --help)
                echo 'usage: ./configure [options]'
                echo 'options:'
                echo '  --prefix=<path>: installation prefix'
                echo '  --debug : include debug symbols'
                echo '  --arch=<arch>: the target arch'
                echo '  --with-lsl=[yes|no]: override auto detection of LSL'
                echo '  --with-osc=[yes|no]: override auto detection of OSC'
                echo '  --cxxstandard=[c++14|c++17]: override auto detection of c++ standard'
                echo 'all invalid options are silently ignored'
                exit 0
                ;;
        esac
    done

    if [ "x$ARCH" = "x" ]; then
        ARCH=`uname -m`
    fi

    case $ARCH in
        armhf)
            echo "COMPILERPREFIX=arm-linux-gnueabihf-"
            ;;
        arm*)
            ;;
    esac

    case `uname -s` in
        *Linux*)
            PLATFORM=linux
            echo PLATFORM=linux
            echo DYNAMIC_LIB_EXT=".so"
            GCC_VER=`gcc -dumpversion | head -1|sed -e 's/.*[[:blank:]]//' -e 's/\([2-4]\)\.\([0-9]*\)\.\([0-9]*\)/-\1.\2/' -e 's/\([5-9]\)\.\([0-9]*\)\.\([0-9]*\)/-\1/' -e 's/^[0-9]/-&/1'`
            echo GCC_VER=${GCC_VER}
            echo BUILD_DIR=${ARCH}-${PLATFORM}-gcc${GCC_VER}
            ;;
        *Cygwin* | *Msys* | *MinGW* | *MINGW* )
            PLATFORM=MinGW
            echo PLATFORM=MinGW
            echo DYNAMIC_LIB_EXT=".dll"
            GCC_VER=`gcc -dumpversion | head -1|sed -e 's/.*[[:blank:]]//' -e 's/\([2-4]\)\.\([0-9]*\)\.\([0-9]*\)/-\1.\2/' -e 's/\([5-9]\)\.\([0-9]*\)\.\([0-9]*\)/-\1/' -e 's/^[0-9]/-&/1'`
            echo GCC_VER=${GCC_VER}
            echo BUILD_DIR=${ARCH}-${PLATFORM}-gcc${GCC_VER}
            ;;
        Darwin)
            PLATFORM=Darwin
            echo PLATFORM=Darwin
            echo DYNAMIC_LIB_EXT=".dylib"
            echo BUILD_DIR=${ARCH}-${PLATFORM}-clang
            echo TOOLSET=clang
            echo WITH_JACK=yes
            echo LDLIBS+='-L/opt/local/lib'
            MACCXXFLAGS+="-I/opt/local/include -Wno-error=unused-command-line-argument"
            MACLDFLAGS+=-L/opt/local/include
            CXXSTANDARD=c++17
    esac
    echo ARCH=$ARCH
    echo PREFIX=$PREFIX

    if [ "x$WITH_ALSA" = "xyes" ]; then
        echo "WITH_ALSA=yes";
    elif [ "x$WITH_ALSA" = "xno" ]; then
        echo "WITH_ALSA=no";
    else
        pkg-config alsa && (echo "WITH_ALSA=yes")
    fi

    if [ "x$PLATFORM" = "xMinGW" ]; then
        WITH_JACK=yes
    fi

    if [ "x$WITH_JACK" = "xyes" ]; then
        echo "WITH_JACK=yes";
    elif [ "x$WITH_JACK" = "xno" ]; then
        echo "WITH_JACK=no";
    else
        pkg-config jack && (echo "WITH_JACK=yes")
    fi

    if [ "x$WITH_LSL" = "xyes" ]; then
        echo "WITH_LSL=yes";
    elif [ "x$WITH_LSL" = "xno" ]; then
        echo "WITH_LSL=no";
    else
        chkhdr lsl_cpp.h && chklib lsl && (echo "WITH_LSL=yes");
    fi

    if [ "x$WITH_OSC" = "xyes" ]; then
        echo "WITH_OSC=yes";
    elif [ "x$WITH_OSC" = "xno" ]; then
        echo "WITH_OSC=no";
    else
        chkhdr lo/lo.h && chklib lo && (echo "WITH_OSC=yes");
    fi

    if [ "x$WITH_EIGEN" = "xyes" ]; then
        echo "WITH_EIGEN=yes";
    elif [ "x$WITH_EIGEN" = "xno" ]; then
        echo "WITH_EIGEN=no";
    else
        chkhdr eigen3/Eigen/Eigen && (echo "WITH_EIGEN=yes");
    fi

    if [ "x$CXXSTANDARD" = "x" ]; then
        case "$GCC_VER"x in
            -7*|-8*|-9*)
                CXXSTANDARD=c++17
                ;;
            *)
                CXXSTANDARD=c++14
                ;;
        esac
    fi
    echo "CXXSTANDARD=$CXXSTANDARD";


    case "$GCC_VER"x in
        -7*|-8*|-9*)
            echo "CXXFLAGS+=-Wmisleading-indentation  -Wlogical-op -Wduplicated-cond -Wduplicated-branches"\
                 " -Wformat-signedness";
            echo "CFLAGS+=-Wmisleading-indentation  -Wlogical-op -Wduplicated-cond -Wduplicated-branches";
            ;;
        *)
            ;;
    esac

    case $ARCH in
        armhf)
            echo "COMPILERPREFIX=arm-linux-gnueabihf-"
            ;;
        arm*)
            echo "SSE+=-mcpu=cortex-a8 -mfloat-abi=hard -mfpu=neon"
            ;;
        x86_64*|i686*)
            echo "SSE+=-msse -msse2 -mfpmath=sse"
            ;;
    esac

    if type -P ccache >/dev/null
    then
        echo 'COMPILERPREFIX:=ccache $(COMPILERPREFIX)'
    fi

    echo 'OPTIM=-O3 $(SSE) -ffast-math -fomit-frame-pointer -fno-finite-math-only'
    echo 'CXXFLAGS+=-Wall -Wnon-virtual-dtor -Wformat -Werror -std=$(CXXSTANDARD) -fPIC $(OPTIM)' ${MACCXXFLAGS} $DEBUG
    echo 'CFLAGS+=-Wall -Werror -std=gnu11 -fPIC $(OPTIM)' ${MACCXXFLAGS} $DEBUG
    if [[ $(type -P octave) ]] ; then
        echo "MHA_TEST_COMMAND=octave --no-gui --no-window-system --eval"\
             "\"set_environment;exit(~run_mha_tests())\"";
    elif [[ $(type -P matlab) ]]; then
        echo "MHA_TEST_COMMAND=matlab -nodesktop -nosplash -nodisplay -r"\
             "\"set_environment;exit(~run_mha_tests())\"";
    fi
) | tee config.mk

# Local Variables:
# coding: utf-8-unix
# indent-tabs-mode: nil
# End:

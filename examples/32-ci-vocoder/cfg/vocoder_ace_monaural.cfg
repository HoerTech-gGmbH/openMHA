# This file is part of the HörTech Open Master Hearing Aid (openMHA)
# Copyright © 2024 Hörzentrum Oldenburg gGmbH
#
# openMHA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# openMHA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License, version 3 for more details.
#
# You should have received a copy of the GNU Affero General Public License, 
# version 3 along with openMHA.  If not, see <http://www.gnu.org/licenses/>.


nchannels_in = 1
fragsize = ${FRAGSIZE}
srate = ${SRATE}

mhalib = transducers
iolib = MHAIOFile

mha.plugin_name = mhachain
mha.calib_in.peaklevel = ${CALIB_IN_PEAKLEVEL}
mha.calib_out.peaklevel = ${CALIB_OUT_PEAKLEVEL}
mha.calib_out.fir = ${CALIB_OUT_FIR}

mha.mhachain.algos = [matrixmixer:stimulation_type split combinechannels]

mha.mhachain.stimulation_type.m = ${STIMULATION_TYPE}

mha.mhachain.split.algos = [mhachain:electric mhachain:acoustic]
mha.mhachain.split.channels = [1 1]
mha.mhachain.split.thread_platform = ${THREAD_PLATFORM}
mha.mhachain.split.worker_thread_scheduler = ${WORKER_THREAD_SCHEDULER}
mha.mhachain.split.worker_thread_priority = ${WORKER_THREAD_PRIORITY}

mha.mhachain.split.electric.algos = [mhachain:preprocessing dbasync]

# Here, algorithm configurations for preprocessing of the electric signal can 
# be specified:
mha.mhachain.split.electric.preprocessing.algos = []

mha.mhachain.split.electric.dbasync.plugin_name = mhachain:vocoder
mha.mhachain.split.electric.dbasync.fragsize = ${DBASYNC_FRAGSIZE}
mha.mhachain.split.electric.dbasync.delay = ${DBASYNC_DELAY}

mha.mhachain.split.electric.dbasync.vocoder.?read:cfg/vocoder_ace_1ch.cfg

mha.mhachain.split.electric.dbasync.vocoder.overlapadd.electrodogram.randomization_seed = ${ELECTRODOGRAM_RANDOMIZATION_SEED}

mha.mhachain.split.acoustic.algos = [iirfilter mhachain:hi_simulation mhachain:ha_simulation]

mha.mhachain.split.acoustic.iirfilter.B = ${ACOUSTIC_IIRFILTER_B}
mha.mhachain.split.acoustic.iirfilter.A = ${ACOUSTIC_IIRFILTER_A}

# Here, algorithm configurations simulating hearing impairment in the residual 
# acoustic hearing can be specified:
mha.mhachain.split.acoustic.hi_simulation.algos = []

# Here, algorithm configurations simulating a hearing aid for treatment of any 
# hearing impairment in the residual acoustic hearing can be specified:
mha.mhachain.split.acoustic.ha_simulation.algos = []

io.in = ${IO_IN}
io.out = ${IO_OUT}

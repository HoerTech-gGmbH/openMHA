# This file is part of the HörTech Open Master Hearing Aid (openMHA)
# Copyright © 2017 2018 2019 HörTech gGmbH
#
# openMHA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# openMHA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License, version 3 for more details.
#
# You should have received a copy of the GNU Affero General Public License, 
# version 3 along with openMHA.  If not, see <http://www.gnu.org/licenses/>.

srate = 48000
nchannels_in = 4
fragsize = 320

# Audio IO library to use. To use test file comment out line beginning with "io.con_in"
iolib = MHAIOJack
io.con_in = [system:capture_5 system:capture_6 system:capture_7 system:capture_8]
io.con_out = [system:playback_1 system:playback_2]

mhalib = resampling

mha.srate = 16000
mha.fragsize = 160
mha.plugin_name = mhachain:doachain


mha.doachain.algos = [addsndfile gain route:doa_in route:doa_1_2 doasvm_feature_extraction:gcc_1_2 route:doa_1_3 doasvm_feature_extraction:gcc_1_3 route:doa_1_4 doasvm_feature_extraction:gcc_1_4 route:doa_2_3 doasvm_feature_extraction:gcc_2_3 route:doa_2_4 doasvm_feature_extraction:gcc_2_4 route:doa_3_4 doasvm_feature_extraction:gcc_3_4 acConcat_wave:concat doasvm_classification:svm acPooling_wave:pool acsave:doasvm_save  acmon:doasvm_mon route:all altplugs:post wavrec]


mha.doachain.addsndfile.level=60
mha.doachain.addsndfile.levelmode=rms
mha.doachain.addsndfile.channels=[0 1 2 3]
mha.doachain.addsndfile.mode=add
# To use a 4-ch test signal, uncomment the following line
# mha.doachain.addsndfile.filename=localizer-test.wav

mha.doachain.gain.gains = [6 6 6 6]

# route only four channels to the DOA estimation and save all the channels for future filtering
mha.doachain.doa_in.out = [:0 :1 :2 :3]
mha.doachain.doa_in.ac = [:0 :1 :2 :3]

# configure doasvm_feature_extraction plugins, which compute the GCC matrices
mha.doachain.gcc_1_2.fftlen = 160
mha.doachain.gcc_1_2.nupsample = 4
mha.doachain.gcc_1_2.max_lag = 20
mha.doachain.gcc_1_2.vGCC_name = vGCC_ac_1

mha.doachain.gcc_1_3.fftlen = 160
mha.doachain.gcc_1_3.nupsample = 4
mha.doachain.gcc_1_3.max_lag = 2
mha.doachain.gcc_1_3.vGCC_name = vGCC_ac_2

mha.doachain.gcc_1_4.fftlen = 160
mha.doachain.gcc_1_4.nupsample = 4
mha.doachain.gcc_1_4.max_lag = 20
mha.doachain.gcc_1_4.vGCC_name = vGCC_ac_3

mha.doachain.gcc_2_3.fftlen = 160
mha.doachain.gcc_2_3.nupsample = 4
mha.doachain.gcc_2_3.max_lag = 20
mha.doachain.gcc_2_3.vGCC_name = vGCC_ac_4

mha.doachain.gcc_2_4.fftlen = 160
mha.doachain.gcc_2_4.nupsample = 4
mha.doachain.gcc_2_4.max_lag = 2
mha.doachain.gcc_2_4.vGCC_name = vGCC_ac_5

mha.doachain.gcc_3_4.fftlen = 160
mha.doachain.gcc_3_4.nupsample = 4
mha.doachain.gcc_3_4.max_lag = 20
mha.doachain.gcc_3_4.vGCC_name = vGCC_ac_6





# configure route plugins for redirecting the corresponding channel pair to the doasvm_feature_extraction plugins
mha.doachain.doa_1_2.out = [:1 :0]                                      # channels 2, 1
mha.doachain.doa_1_2.ac = [:2 :3]                                       # channels 3, 4

mha.doachain.doa_1_3.out = [doa_1_2:0 :1]                               # channels 3, 1
mha.doachain.doa_1_3.ac = [:0 doa_1_2:1]                                # channels 2, 4

mha.doachain.doa_1_4.out = [doa_1_3:1 :1]       # channels 4, 1
mha.doachain.doa_1_4.ac = [doa_1_3:0 :0]        # channels 2, 3

mha.doachain.doa_2_3.out = [doa_1_4:1 doa_1_4:0]      # channels 3, 2
mha.doachain.doa_2_3.ac = [:1 :0]         # channels 1, 4

mha.doachain.doa_2_4.out = [doa_2_3:1 :1]       # channels 4, 2
mha.doachain.doa_2_4.ac = [doa_2_3:0 :0]        # channels 1, 3

mha.doachain.doa_3_4.out = [:0 doa_2_4:1]       # channels 4, 3
mha.doachain.doa_3_4.ac = [doa_2_4:0 :1]        # channels 1, 2




# concatenate all pairwise gcc vectors into one big vector
mha.doachain.concat.num_AC = 6
mha.doachain.concat.prefix_names_AC = vGCC_ac
mha.doachain.concat.samples_AC = [161 17 161 161 17 161]
mha.doachain.concat.name_con_AC = vGCC_con_ac

# configure doasvm_classification plugin by loading the SVM parameters
mha.doachain.svm?read:./matrices_4channel_front-rear_bte.cfg

mha.doachain.svm.vGCC_name = vGCC_con_ac




# configure acPooling_wave plugin for pooling the SVM estimations of the recent history
mha.doachain.pool.p_name = p
mha.doachain.pool.pool_name = pool
mha.doachain.pool.max_pool_ind_name = pool_max
mha.doachain.pool.numsamples = 73
mha.doachain.pool.pooling_wndlen = 300
mha.doachain.pool.pooling_type = mean
mha.doachain.pool.upper_threshold = 0.1
mha.doachain.pool.neighbourhood = 4
mha.doachain.pool.alpha = 0
mha.doachain.pool.prob_bias = [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]

mha.doachain.doasvm_save.name = Output/4ch_doasvm_acsave.mat
mha.doachain.doasvm_save.fileformat = mat4
mha.doachain.doasvm_save.reclen = 30
mha.doachain.doasvm_save.vars = [p p_max pool pool_max vGCC_ac_1 vGCC_ac_2 vGCC_ac_3 vGCC_ac_4 vGCC_ac_5 vGCC_ac_6 vGCC_con_ac]



# merge all channels for signal processing
mha.doachain.all.out = [doa_in:0 doa_in:1 doa_in:2 doa_in:3]

mha.doachain.post.plugs=[route:NoBf overlapadd:Bf]
mha.doachain.post.select = Bf

mha.doachain.post.NoBf.out=[:0 :1]

# configure Bf node for steering beamformer filters
mha.doachain.post.Bf.fftlen = 512
mha.doachain.post.Bf.wnd.len = 320
mha.doachain.post.Bf.zerownd.type = hanning
mha.doachain.post.Bf.plugin_name = mhachain:bfChain

mha.doachain.post.Bf.bfChain.algos = [route:left_in acSteer:mvdr steerbf:left save_spec:left_out route:right_in steerbf:right route:out]

mha.doachain.post.Bf.bfChain.left_in.out = [:0 :1 :2 :3]
mha.doachain.post.Bf.bfChain.left_in.ac = [:0 :1 :2 :3]

#configure steervec for the left reference microphone
mha.doachain.post.Bf.bfChain.mvdr.steerFile = ./MVDR_iso_norm_bte_16KHz_4ch_lr_FFT512_-180-5-180.txt
mha.doachain.post.Bf.bfChain.mvdr.nsteerchan = 584
mha.doachain.post.Bf.bfChain.mvdr.acSteerName1 = acSteerLeft
mha.doachain.post.Bf.bfChain.mvdr.acSteerName2 = acSteerRight
mha.doachain.post.Bf.bfChain.mvdr.nrefmic = 2

#configure steerbf for the left reference microphone
mha.doachain.post.Bf.bfChain.left.bf_src = acSteerLeft
mha.doachain.post.Bf.bfChain.left.angle_src = pool_max
#mha.doachain.post.Bf.bfChain.left.angle_ind = 36

# route the input signal to the beamformer with the right reference microphone
mha.doachain.post.Bf.bfChain.right_in.out = [left_in:0 left_in:1 left_in:2 left_in:3]
mha.doachain.post.Bf.bfChain.right_in.ac = [:0]


#configure steerbf for the right reference microphone
mha.doachain.post.Bf.bfChain.right.bf_src = acSteerRight
mha.doachain.post.Bf.bfChain.right.angle_src = pool_max
#mha.doachain.post.Bf.bfChain.right.angle_ind = 36

# route the filter outputs of the left and right beamformers to the output
mha.doachain.post.Bf.bfChain.out.out = [right_in:0 :0]

mha.doachain.wavrec.record = no
mha.doachain.wavrec.prefix = ./Output/Enhanced_

#run the configuration
cmd = start
#cmd=quit

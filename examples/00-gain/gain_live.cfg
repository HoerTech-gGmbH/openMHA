# This file is part of the HörTech Open Master Hearing Aid (openMHA)
# Copyright © 2013 2017 2018 HörTech gGmbH
#
# openMHA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# openMHA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License, version 3 for more details.
#
# You should have received a copy of the GNU Affero General Public License,
# version 3 along with openMHA.  If not, see <http://www.gnu.org/licenses/>.

# openMHA is a software platform to process audio signals with hearing
# aid signal processing algorithms.  Signal processing algorithms are
# implemented as plug-ins that are loaded into the MHA process at
# runtime.
#
# The openMHA framework itself and also the MHA plugins support
# configuration of their settings through a text-based configuration
# language.

# We have to tell the MHA how many audio channels to process.
# The "nchannels_in" variable accepts positive integers.
nchannels_in = 2
# The number of output channels is auto-deduced by the MHA.

# When we perform real-time signal processing, we process the signal
# in small chunks of data: Take a chunk from the sound card capture
# channels, process it, and output the result to the sound card output
# channels.
#
# The setting "fragsize" tells the MHA how many audio sample per channel
# are to be processed in each chunk.
fragsize = 64

# MHA processes discrete-time digital audio signals with a fixed
# sampling rate.  The sampling rate tells MHA how many samples per
# second have been digitized in each audio channel.
srate = 44100

# The MHA framework can load a single MHA plugin to process the data.
# We tell the MHA which plugin to load with the "mhalib" variable.
# Usually MHA configurations consist of more than just one plugin.
# MHA provides structuring plugins that can themselves load other
# plugins for this purpose.
#
mhalib = mhachain

# parser "mha":
#
# Above we loaded the mhachain plugin into the MHA
# with the assignment "mhalib = mhachain".  When the MHA executed
# this assignment, it loaded the mhachain plugin into the MHA
# process.
# MHA makes the configuration variables of this plugin available to
# the sub-parser "mha". We call the hierarchy layers in the MHA
# configuration tree "parsers"

# Usually MHA configurations consist of more than just one plugin.
# MHA provides structuring plugins that can themselves load other
# plugins for this purpose.
#
# The mhachain plugin has a configuration variable "algos".
# When a string is written to this configuration variable, the
# mhachain plugin will itself load other MHA plugins into the MHA process,
# which receive the input signal from mhachain.
#
# In this example mhachain loads only the gain plugin.
#
# Note that a vector value is written with square brackets
# surrounding the element values, which are separated by spaces.
mha.algos=[ gain ]

# The gain plugin applies a gain to each channel of the audio signal.
# By default, the maximum gain applied is +/- 16 dB, but this can
# be overriden by setting the min and max variables:
mha.gain.min=-20
mha.gain.max=20

# The gains are set by a vector of float values, one value per channel
mha.gain.gains=[ -10 10 ]

# parser "io":
#
# JACK IO client.
#
# MHA supports different audio back-ends: Sound can come from and go
# to either
# - sound cards,
# - the Jack audio server,
# - sound files, or
# - the network.
#
# In this example, we load the IO library that connects the MHA to the
# Jack audio server.

iolib = MHAIOJackdb

# Note that the settings for sampling rate and frag size in Jack and MHA
# have to match. In case of a mismatch, MHA aborts with an error message.

# This variable is used to select the input sound channel(s),
# following the usual Jack nomenclature
io.con_in = [system:capture_1 system:capture_2]

# con_out sets the output channels
io.con_out = [system:playback_1 system:playback_2]

#This configuration file can be run with the following command
#mha ?read:gain_live.cfg cmd=start

# Local Variables:
# indent-tabs-mode: nil
# coding: utf-8-unix
# End:

# This file is part of the HörTech Open Master Hearing Aid (openMHA)
# Copyright © 2020 HörTech gGmbH
#
# openMHA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# openMHA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License, version 3 for more details.
#
# You should have received a copy of the GNU Affero General Public License,
# version 3 along with openMHA.  If not, see <http://www.gnu.org/licenses/>.


# Adaptive MVDR beamformer
#
# as used in
#
# Baumgärtel, R. M., Krawczyk-Becker, M., Marquardt, D., Völker, C.,
# Hu, H., Herzke, T., Coleman, G., Adiloğlu, K., Ernst, S. M.,
# Gerkmann, T., Doclo, S., Kollmeier, B., Hohmann, V., & Dietz, M.
# (2015). Comparing Binaural Pre-processing Strategies I: Instrumental
# Evaluation. Trends in hearing, 19, 2331216515617916.
#
# including a bug fix done after communication with Daniel Marquardt,
# the developer of the algorithm, in the implementation in Hendrikse2020
#
# Hendrikse, M. M. E., Grimm, G., & Hohmann, V. (2020). Evaluation of
# the Influence of Head Movement on Hearing Aid Algorithm Performance
# Using Acoustic Simulations. Trends in Hearing, 24,
# 1–20. https://doi.org/10.1177/2331216520916682
#
# Sampling rate: 16000 Hz
#
# Input channel layout:
# front-left front-right rear-left rear-right
#

# chAlgo = [1,2,5,6];
nchannels_in = 4
srate = 16000
fragsize = 160

mhalib = mhachain
iolib=MHAIOFile

#do the processing for fixed beamforming + postfiltering

#the main processing chain has the following steps:
#1. copyInput: make full copies of input signal to be filtered in parallel
#2. spBF: apply FIR filters to each channel (for beamforming), passing refs.
#3. spMix: sum the fixed beamforming channels, perform blocking for GSC
#4. preAF: prepare signals for adaptive filtering 
#5. spAF: adaptive filter 

mha.algos = [route:copyInput split:spBF split:spMix route:preAF split:spAF]

#copy the inputs: [bfL] [bfR] [bfBlock]
mha.copyInput.out = [:0 :1 :2 :3 :0 :1 :2 :3 :0 :1 :2 :3]

#do not filter the blocking channels, for now
mha.spBF.algos = [fftfilter:filterBF identity]
mha.spBF.channels = [8 4]
mha.spBF.thread_platform = dummy

#process copied channels with filters
#read in BF coefficients from separate file
mha.spBF.filterBF?read:${MHA_CFG_DIR}/bf_coeffs8b.cfg

#separate mixers for:
#a) fixed beamformer-summing and b) blocking for adaptive filter
mha.spMix.algos = [matrixmixer:mixBF matrixmixer:mixBlock]
mha.spMix.channels = [8 4]

mha.spMix.mixBF.m = [[1 1 1 1 0 0 0 0]; [0 0 0 0 1 1 1 1]] #BF sum
mha.spMix.mixBlock.m = [[1 -1 0 0]; [0 0 1 -1]] #left-right blocking only

# Channel layout:
# [2-ch noise reference, left beamformed signal, 2-ch noise reference, right beamformed signal]  
mha.preAF.out = [:2 :3 :0 :2 :3 :1]

# Adaptive filtering
mha.spAF.algos = [gsc_adaptive_stage:filtL gsc_adaptive_stage:filtR]
mha.spAF.channels = [3 3]

# left
mha.spAF.filtL?read:${MHA_CFG_DIR}/adaptiveFilterSettings.cfg

# right
mha.spAF.filtR?read:${MHA_CFG_DIR}/adaptiveFilterSettings.cfg

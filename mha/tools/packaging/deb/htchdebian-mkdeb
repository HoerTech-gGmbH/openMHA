#!/bin/sh
set -e
# Redistribute the files in the distribution to the linux file system
# Do not call with .csv files from untrusted sources.

# first command line parameter names a comma-separated-values file
# that contains pairs of source file and destination directory.
CSV="$1"

# second command line parameter is the full debian package version number
VERSION="$2"

# third parameter is the architecture identifier as used by debian.
# This parameter is optional, if it is not given, it will be deduced
# from the uname command.
ARCH="$3"

# test version command line parameter is there
if test -z "${VERSION}"; then
    echo "Usage: htchdebian-mkdeb file.csv VERSION [ARCH]"
    exit 1
fi

# Generate debian package name from .csv filename: remove directory
# prefixes and .csv extension from .csv file name.  Also convert all
# uppercase letters to lowercase.
PACKAGE=`echo "${CSV}"|sed -e 's/^.*\///1' -e 's/\.csv//1'|tr '[:upper:]' '[:lower:]'`

# More input files that just the .csv file are used as input to
# produce the debian package.  They are all stored in the same
# directory as the .csv file, and have different extensions.  The
# PACKAGEBASE variable is going to be used further down to refer to
# these files, e.g. with "$PACKAGEBASE.dep".  We remove the .csv
# extension for this here.
PACKAGEBASE=`echo "${CSV}"|sed -e 's/\.csv//1'`

# The debian package is built in subdirectory debian of the CWD.
# Remove residues of previous package builds.
rm -Rf debian

# The directory that stores some control files that we generate for
# the packing.
mkdir -p debian/DEBIAN

# a bash function that ignores its first parameter and calls mkdir -p
# with the second parameter
mkdir_p_2nd() {
    mkdir -p $2
}

# read all entries from a .csv file and call the given command with
# each line's parameters.  All entries are passed through envsubst
# before being used as parameters.  In each line, the first entry is
# globbed (wildcard expansion), and each expansion is used together
# with the second parameter before are given to the command.
call_for_each_csv_line() {
    # The csv file to read
    filename="$1"
    # the command to execute
    command="$2"
    # A prefix to prepend to the second parameter when calling command
    prefix_second="$3"
    # read the .csv file, replace all double-quotes and commas with
    # spaces, replace all ${} environment variable references with
    # their values, iterate over each line with the .csv fields in
    # variables first and second
    sed -e 's/[",]/ /g' "$filename" | envsubst | while read first second
    do
	# expand any wildcards present in the first parameter
	for first_expanded in $(ruby -e 'puts Dir.glob(ARGV)' "$first")
	do
	    # prepend prefix_second to second, then execute the given command
	    # with the .csv entries of this line as parameters
	    $command "$first_expanded" "$prefix_second$second"
	done
    done
}

# create target directory structure:
call_for_each_csv_line "$CSV" mkdir_p_2nd debian/

# copy files:
call_for_each_csv_line "$CSV" "cp -r" debian/

# All files in the distribution should be readable by everyone
chmod -R a+r debian

#
## Discover information for this distribution
#
distname="${PACKAGE}"
version="${VERSION}"
if test -z "${ARCH}"; then
    ARCH=$(uname -m | sed -e s/i686/i386/ -e s/x86_/amd/)
    echo "Architecture ${ARCH} detected."
fi
packagename=$(echo "$distname" | sed -e "s/_/-/g")
#packageversion="$version"-$(date +%Y%m%d)
packageversion="$version"
deb_depends="Depends: "`cat "${PACKAGEBASE}.dep"|sed -e "s/(VERSION)/(=${VERSION})/g"`
deb_provides="Provides: ${PACKAGE}"
inst_size=`du debian|tail -1|sed -e 's/\([0-9]*\).*/\1/1'`

cat <<EndOfControl | sed -e '/^[[:alnum:]]*:[[:blank:]]*$/ d'> debian/DEBIAN/control
Package: $packagename
Version: $packageversion
Priority: optional
Architecture: $ARCH
$deb_depends
$deb_provides
Installed-Size: $inst_size
EndOfControl
cat "${PACKAGEBASE}.control" >> debian/DEBIAN/control

test -e "${PACKAGEBASE}.conffiles" && cat "${PACKAGEBASE}.conffiles" > debian/DEBIAN/conffiles

fakeroot=/usr/bin/fakeroot
test -x $fakeroot || fakeroot=""
$fakeroot dpkg-deb --build debian
mv debian.deb "$packagename"_"$packageversion"_"${ARCH}".deb
rm -Rf debian

# Local Variables:
# mode: shell-script
# End:

# This file is part of the HörTech Open Master Hearing Aid (openMHA)
# Copyright © 2017 2018 2019 2020 HörTech gGmbH
#
# openMHA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# openMHA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License, version 3 for more details.
#
# You should have received a copy of the GNU Affero General Public License, 
# version 3 along with openMHA.  If not, see <http://www.gnu.org/licenses/>.

fragsize = 36
srate = 48000
nchannels_in = 1        # single input is mic

iolib = MHAIOJack
io.con_in = [system:capture_1]
io.con_out = [system:playback_1]


mhalib = mhachain       # implements this algorithm as a sequence of plugins

# This configuration file sets up the prediction error based adaptive feedback
# cancellation (AFC) algorithm as described in the following two references:

# A. Spriet, I.Proudler, M. Moonen and J. Wouters, "Adaptive Feedback Cancellation
# in Hearing Aids with Linear Prediction of the Desired Signal", IEEE Transactions
# on Signal Processing, vol 53, no 10, October 2005.

# H. Schepker and S. Doclo, "A Semidefinite Programming Approach to Min-Max Estimation
# of the Common Part of the Acoustic Feedback Paths in Hearing Aids", IEEE/ACM
# Transactions on Audio, Speech and Language Processing, vol 24, no 2, February 2016.

# This algorithm suppresses the feedback within the input (microphone) signal using the
# last estimate of the acoustic feedback path coefficients before passing the signal to
# the signal processing path (the so-called forward path). Ideally only the feedback-free
# (desired) signal is processed by the signal processing path. However, the changing
# acoustic conditions also change feedback. Therefore, in the feedback cancellation path,
# the feedback path coefficients are continuously adapted to the changing feedback by
# minimizing the error between the measured and predicted output signals.

# This configuration has been adapted to run on a hardware setup consisting of
# the following components:
# - Intel NUC 7i7BNH
#   - 16 GB main memory
#   - 256 GB SSD hard disk
# - Motu 8M USB sound card
# - Custom made hearing aid dummies with 2 microphones and one receiver (Only one microphone
#   signal has been considered.)
# The algorithm in this configuration runs at 16 kHz sampling rate. As the sound card, which
# provides the live input signal to the openMHA as well as plays back the feedback-reduced
# output signal using the receiver on the hearing aid dummy, does not support this sampling
# rate, we downsample the input signal from 48 kHz to 16 kHz and upsample the output signal
# back to 48 kHz after the AFC processing. In order to eliminate the aliasing effects, which
# can occur due to down- and upsampling, we apply an anti-aliasing filter after these
# resampling steps.

# The prediction_error plugin implements the following steps: 
#  In the forward path:
#    The error signal is computed
#    for this, the output signal filtered using the last estimate of the adaptive
#        feedback path is subtracted from the input signal
#    A total delay of 96 taps is applied
#    A total gain of 20 dB is applied on the error signal
#    After the delay and gain steps the signal is saved as the output signal
#  In the feedback cancellation path:
#    The transducer delays of 95 taps are compensated
#    The microphone signal as well as the output signal are delayed a total of 161 taps
#    The delayed input and output signals are prewhitened using the linear predictive coding
#        (LPC) coefficients
#    The coefficients of the feedback path are re-estimated using a least means squared (LMS)
#        algorithm
#

# The estimation of the LPC coefficients is performed using a different fragment size. In this
# configuration, a fragment size of 160 samples is used. For this reason, this estimation is
# performed in another thread using the analysispath plugin.

mha.algos = [downsample prediction_error:nlms save_wave:vU ac2wave:restore_E analysispath ...
    route:out ...  
    acmon:afc_mon ...
    upsample]

# Anti-Aliasing Filter for downsampling from 48KHz zo 16KHz
# In this configuration a 5th order Butterwordth filter is used.
# For more details about the anti-aliasing filters please refer to
# S. W. Smith "The Scientist and Engineer's Guide to Digital Signal Processing", Chapter 3
# California Technical Publishing, San Diego, USA, 1997-1998.
# www.DSPguide.com
mha.downsample.antialias.B = [0.0106  0.0531 0.1061  0.1061 0.0531  0.0106]
mha.downsample.antialias.A = [1.0000 -1.6448 1.5866 -0.8049 0.2299 -0.0273]

# Restore the error signal for the LPC computation
mha.restore_E.name = vE        # recall the vE signal from AC space
mha.restore_E.gain_in = 0      # gain of the intermediate x signal
mha.restore_E.gain_ac = +1     # gain of the vE signal (from AC space)

# analysispath
mha.analysispath.plugname = lpc
mha.analysispath.fragsize = 160
mha.analysispath.acvars = lpc

# LPC path
# The input and output signals are delayed and prewhitened using the LPC
# coefficients. Therefore, the corresponding delay line in the prediction_error
# plugin should be adjusted by considering the LPC bufer size.
mha.analysispath.plug.lpc_order = 20
mha.analysispath.plug.shift = yes
mha.analysispath.plug.comp_each_iter = 1
mha.analysispath.plug.norm = yes
mha.analysispath.plug.lpc_buffer_size = 160


# configure prediction_error:NLMS
# The configuration variable "delay_w" compensates for the transducer delays in samples. Therefore
# it must be adapted to the sound hardware used. For this, the user is expected to measure the
# the delay caused by the transducers and the sound card in samples. For this purpose, the
# jack_iodelay tool can be used. In that case, the "extra_loopback_latency" of the sound hardware
# used should be measured. The user can refer to the jack documentation about how to use
# jack_iodelay:
# 1. Measure the round trip latency using jack_iodelay
# 2. Consider the "extra_loopback_latency" given by jack_iodelay
# 2. Add "fragsize" of the configuration to this latency
# 3. Add the length of the anti-aliasing filter in taps to this sum
# 4. Set the configuration variable "delay_w" to this sum.
# While calculating the total delay, the downsampling step should be considered as well.
# As an example, the current configuration and hence jack runs at 48 kHz. However this plugin
# (prediction_error:nlms) operates at 16 kHz. Consequently, the total measured latency should
# be scaled accordingly before setting the configuration variable "delay_w".
mha.nlms.rho = 0.005            # convergence coefficient
mha.nlms.c = 1e-6               # stabilization parameter
mha.nlms.ntaps = 47             # number of taps in filter
mha.nlms.name_lpc = lpc         # Name of the lpc coefficients variable
mha.nlms.lpc_order = 20
mha.nlms.name_e = vE            # Name of error signal E, here estimated using LPC
mha.nlms.delay_w = 95
mha.nlms.delay_d = 161          # Length of the LPC buffer plus one (160 + 1)
mha.nlms.pred_err_delay = 96    # Delay applied to the signal in the forward path
mha.nlms.n_no_update = 256
mha.nlms.name_f = vWfull
mha.nlms.gains = 3              # Gain applied to the signal in the forward path

# recall stored vU and pass to output
mha.out.out = [vU:0]
# save the output of the current iteration for theLPC to be performed in the next iteration
mha.out.ac = [vU:0]

mha.afc_mon.dispmode = matrix   # correct dimensions in MATLAB

# Anti-Aliasing-Filter for upsampling from 16KHz up to 48KHz
mha.upsample.antialias.B = [0.0106  0.0531 0.1061  0.1061 0.0531  0.0106]
mha.upsample.antialias.A = [1.0000 -1.6448 1.5866 -0.8049 0.2299 -0.0273]

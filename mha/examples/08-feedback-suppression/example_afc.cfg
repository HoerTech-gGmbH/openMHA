fragsize = 1
srate = 16000
nchannels_in = 1

iolib = MHAIOParser

mhalib = mhachain:chain #implement this algorithm as a sequence of plugins

# compute the error signal
# use LPC to estimate the error signal f_e in the next iteration
# apply 96 taps delay and 15dB gain on the error signal and save the output as our output signal
# filter the output signal with the common part of the AFC filter
# Estimate the adaptive part of the AFC filter using LMS, use vUbufferprewCP and f_e as input to LMS
# Use LPC to estimate the error signal of the next iteration f_e
# use LPC to estimate the input signal of the next iteration f_x and filter f_x using the common part of the AFC filter
# recall the output signal vU and forward it to the output

# Compute the error signal
# Use LPC (Burg-Lattice) to estimate the error signal in the next iteration
# Apply delay and gain to the error signal to compute the output signal vU
# Restore the output signal vU and apply the common part filter to it
# Apply NLMS to update the variable part filter and filter the incoming signal with it
mha.algos = [save_wave:vY ac2wave:sub_vY_vF save_wave:vE ... 
    lpc_burg-lattice:lpc lpc_bl_predictor:lpc_f_e ... 
    delay:dG gain:vG save_wave:vU ... 
    lpc_bl_predictor:lpc_f_x ac2wave:f_x iirfilter:vUprewCP save_wave:vUbufferprewCP ...
    ac2wave:output iirfilter:vCP  ...  
    nlms_wave:nlms save_wave:vF_hat route:out ...  
    acmon]

# Compute the error signal
mha.sub_vY_vF.name = vF_hat #recall the vF_hat signal from AC space
mha.sub_vY_vF.gain_in = +1 #gain of the intermediate x signal
mha.sub_vY_vF.gain_ac = -1 #gain of the vF_hat signal (from AC space)

mha.lpc.lpc_order = 21
mha.lpc.name_kappa = km
mha.lpc.name_f = vE
mha.lpc.name_b = vE

mha.lpc_f_e.lpc_order = 21
mha.lpc_f_e.name_kappa = km
mha.lpc_f_e.name_lpc_f = f_e
mha.lpc_f_e.name_lpc_b = b_e
mha.lpc_f_e.name_f = vE
mha.lpc_f_e.name_b = vE

# Apply delay and gain to the error signal to compute the output signal
mha.dG.delay = 96
mha.vG.gains = 15

# Apply LPC to estimate the output signal in the next iteration
mha.lpc_f_x.lpc_order = 21
mha.lpc_f_x.name_kappa = km
mha.lpc_f_x.name_lpc_f = lpc_f_x
mha.lpc_f_x.name_lpc_b = lpc_b_x
mha.lpc_f_x.name_f = out
mha.lpc_f_x.name_b = out

# Replace the incoming signal with the LPC estimate of the output signal for the next iteration
mha.f_x.name = lpc_f_x
mha.f_x.gain_in = 0
mha.f_x.gain_ac = 1

# Common part filter coefficients of the AFC for computing the error signal
mha.vUprewCP.B = [0.633482813835144042968750000000 0.096333801746368408203125000000 0.690489530563354492187500000000 0.081699386239051818847656250000 0.325528383255004882812500000000] #filter coefficients for Bc
mha.vUprewCP.A = [1 0.117957308888435363769531250000 1.550792574882507324218750000000 0.172321349382400512695312500000 0.956566989421844482421875000000 0.140063449740409851074218750000 0.322815805673599243164062500000 0.083859808743000030517578125000 0.068209461867809295654296875000] #filter coefficients for Ac

# Common part filter coefficients of the AFC
mha.vCP.B = [0.633482813835144042968750000000 0.096333801746368408203125000000 0.690489530563354492187500000000 0.081699386239051818847656250000 0.325528383255004882812500000000] #filter coefficients for Bc
mha.vCP.A = [1 0.117957308888435363769531250000 1.550792574882507324218750000000 0.172321349382400512695312500000 0.956566989421844482421875000000 0.140063449740409851074218750000 0.322815805673599243164062500000 0.083859808743000030517578125000 0.068209461867809295654296875000] #filter coefficients for Ac

# Recall the output signal for the estimation of the adaptive filter coefficients
mha.output.name = vU #recall the vU signal from AC space
mha.output.gain_in = 0 #gain of the intermediate x signal
mha.output.gain_ac = 1 #gain of the vU signal (from AC space)

# configure NLMS
mha.nlms.rho = 0.0002 # convergence coefficient
mha.nlms.c = 1e-10 # stabilization parameter
mha.nlms.ntaps = 25 # number of taps in filter
mha.nlms.name_u = vUbufferprewCP # Name of previous output signal U, here prewhitened using the common part filter
mha.nlms.name_d = vY # Name of input signal including the feedback (vY = vX + vF)
mha.nlms.name_e = f_e # Name of error signal E, here estimated using LPC
mha.nlms.normtype = default # Normalization type from a keyword list
mha.nlms.estimtype = current # Use the current sample of the input signal for the estimation of the filter coefficients
mha.nlms.lambda_smoothing_power = 0.9
mha.nlms.n_no_update = 256

mha.out.out = [vU:0] #recall stored vU and pass to output
mha.out.ac = [vU:0] #save the output of the current iteration for LPC to be performed in the next iteration

mha.acmon.dispmode = matrix #correct dimensions in MATLAB

# This is file example-wave2spec-spec2wave.cfg

# How to use the wave2spec and spec2wave plugins.

# sampling rate to match the rate of the sound file used in this example.
srate = 16000

# input file is stereo, has 2 channels
nchannels_in = 2

# The number of samples to process in a single block.  This is used as
# the hop size in the STFT analysis.
fragsize = 32

# File to file processing in this example
iolib = MHAIOFile

# name of existing input file.  This file has speech of a female
# speaker in the first channel, and speech of a male speaker in the
# second channel.
io.in = 2speaker_separate_ch.wav

# name of output file to produce.  Will be overwritten if it exists
io.out = 2speaker_separate_ch_delayed.wav

# load a chain plugin for chain processing
mhalib = mhachain

# load the wave2spec and spec2wave plugins.  In a realistic use case,
# one or more plugins between these transformation plugins would alter
# the spectral signal.  Here, identity is used instead as a placeholder.
mha.algos = [wave2spec identity spec2wave]

# The hop size of the STFT analysis is configured through the block size
# with which the signal is processed by the wave2spec plugin.  The analysis
# window is configured next:
mha.wave2spec.wndlen = 64
mha.wave2spec.wndtype = hanning

# For use cases where the spectrum is altered, we usually add
# zero-padding before and after the analysis window before the fourier
# transform is computed.  This is done here by choosing an FFT length
# greater than the window length.
mha.wave2spec.fftlen = 96
# MHA uses the FFTW library for the computation of the FFT.  FFTW is
# not limited to powers of two, but can also efficiently compute the
# FFT for other combinations of small prime factors, like the 2^5 * 3
# used here.

# The analysis window will be placed centered in the FFT buffer.  For
# other positions, the variable wndpos can be modified.

# This configuration for short-time-fourier-transform can be started with
#
# mha ?read:example-wave2spec-spec2wave.cfg cmd=start cmd=quit

# When run like this, it will produce an output file
# 2speaker_separate_ch_delayed.wav.  There will be no audible
# difference between input and output files.  When you analyse the
# differences between the files with tools like octave of matlab, you
# will find that the output file is delayed by (here:) 48 samples with
# respect to the input file, and that there are small numeric
# differences between the corresponding, shifted samples.  These
# differences are caused by the floating point computations of the
# windowing and FFT and inverse FFT, and are small enough to be
# inaudible.
